{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Radio } from \"./interfaces/Radio\";\nimport axios, { AxiosError } from 'axios';\n\n// Get the subscription key from the environment variables\n// If you don't have a subscription key, please visit https://www.npmjs.com/package/myradioglobal?activeTab=readme#:~:text=Create%20access%20request to request one.\nconst subscriptionKey = process.env.MYRADIOGLOBAL_SUBSCRIPTION_KEY;\n\nconst axiosClient = axios.create({\n    baseURL: 'https://api.myradioglobal.com',\n    timeout: 15000,\n    headers: {\n        \"Ocp-Apim-Subscription-Key\": subscriptionKey,\n        \"Content-Type\": \"application/json\"\n    }\n  });\n\nfunction checkSubscriptionKey() {\n    if (!subscriptionKey) {\n        throw new Error(\"MYRADIOGLOBAL_SUBSCRIPTION_KEY environment variable is not set, please add it to your environment variables. If you don't have a subscription key, please visit https://www.npmjs.com/package/myradioglobal?activeTab=readme#:~:text=Create%20access%20request to request one.\");\n    }\n}\n\nexport async function getRadiosByCountry(country: string, pageSize?: number, offset?: number): Promise<Radio[]> {\n    checkSubscriptionKey();\n    const url = `/getRadios?country=${country}&pageSize=${pageSize || \"\"}&offset=${offset || \"\"}`;\n    try {\n        const response = await axiosClient.get(url);\n        return (response.data as Radio[]);\n    }\n    catch (error: AxiosError | any) {\n        throw error;\n    }\n}\n\nexport async function getRadiosByName(name: string, pageSize?: number, offset?: number): Promise<Radio[]> {\n    checkSubscriptionKey();\n    const url = `/getRadios?textInput=${name}&pageSize=${pageSize || \"\"}&offset=${offset || \"\"}`;\n    try {\n        const response = await axiosClient.get(url);\n        return (response.data as Radio[]);\n    }\n    catch (error: AxiosError | any) {\n        throw error;\n    }\n}\n\nexport async function getRadiosByNameAndCountry(name: string, country: string, pageSize?: number, offset?: number): Promise<Radio[]> {\n    checkSubscriptionKey();\n    const url = `/getRadios?textInput=${name}&country=${country}&pageSize=${pageSize || \"\"}&offset=${offset || \"\"}`;\n    try {\n        const response = await axiosClient.get(url);\n        return (response.data as Radio[]);\n    }\n    catch (error: AxiosError | any) {\n        throw error;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,WAA2B;AAIlC,IAAM,kBAAkB,QAAQ,IAAI;AAEpC,IAAM,cAAc,MAAM,OAAO;AAAA,EAC7B,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,IACL,6BAA6B;AAAA,IAC7B,gBAAgB;AAAA,EACpB;AACF,CAAC;AAEH,SAAS,uBAAuB;AAC5B,MAAI,CAAC,iBAAiB;AAClB,UAAM,IAAI,MAAM,gRAAgR;AAAA,EACpS;AACJ;AAEA,SAAsB,mBAAmB,SAAiB,UAAmB,QAAmC;AAAA;AAC5G,yBAAqB;AACrB,UAAM,MAAM,sBAAsB,OAAO,aAAa,YAAY,EAAE,WAAW,UAAU,EAAE;AAC3F,QAAI;AACA,YAAM,WAAW,MAAM,YAAY,IAAI,GAAG;AAC1C,aAAQ,SAAS;AAAA,IACrB,SACO,OAAyB;AAC5B,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAEA,SAAsB,gBAAgB,MAAc,UAAmB,QAAmC;AAAA;AACtG,yBAAqB;AACrB,UAAM,MAAM,wBAAwB,IAAI,aAAa,YAAY,EAAE,WAAW,UAAU,EAAE;AAC1F,QAAI;AACA,YAAM,WAAW,MAAM,YAAY,IAAI,GAAG;AAC1C,aAAQ,SAAS;AAAA,IACrB,SACO,OAAyB;AAC5B,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAEA,SAAsB,0BAA0B,MAAc,SAAiB,UAAmB,QAAmC;AAAA;AACjI,yBAAqB;AACrB,UAAM,MAAM,wBAAwB,IAAI,YAAY,OAAO,aAAa,YAAY,EAAE,WAAW,UAAU,EAAE;AAC7G,QAAI;AACA,YAAM,WAAW,MAAM,YAAY,IAAI,GAAG;AAC1C,aAAQ,SAAS;AAAA,IACrB,SACO,OAAyB;AAC5B,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;","names":[]}